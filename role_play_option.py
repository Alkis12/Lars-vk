import random
import json
import pymorphy2
import requests

with open("keys.json", "r", encoding='utf8') as re:
    keys = json.load(re)
with open("vip.json", "r", encoding='utf8') as re:
    vip = json.load(re)
this = ''
last = ''
chit = True
mil = ['–ë–æ–∂–µ—á–∫–∏-–∫–æ—à–µ—á–∫–∏', '–°–≤—è—Ç—ã–µ –º–∞–Ω–¥–∞—Ä–∏–Ω–∫–∏', '–ê–∞–∞', "–û—Ö"]
with open("list.json", "r", encoding='utf8') as re:
    do = json.load(re)
with open("lisolo.json", "r", encoding='utf8') as re:
    solo = json.load(re)
milan_pad = {'datv': '–ú–∏–ª–∞–Ω–µ', 'accs': '–ú–∏–ª–∞–Ω—É', 'ablt': '–ú–∏–ª–∞–Ω–æ–π', 'gent': '–ú–∏–ª–∞–Ω—ã'}
alex_pad = {'datv': '–ê–ª–µ–∫–∞–Ω–¥—Ä–µ', 'accs': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É', 'ablt': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–π', 'gent': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä—ã'}


def dazai_pashal(event, vk):
    vk.messages.send(
        peer_id=event.obj.message['peer_id'],
        attachment='audio466260834_456239111',
        random_id=random.randint(0, 2 ** 64))


def random_phrase1(gender):
    s = f'{random.choice(mil)}, '
    s += f'—ç—Ç–æ {random.choice(["–æ—á–µ–Ω—å", "—Ç–∞–∞–∫", "—Ç–∞–∫"])} {random.choice(["–º–∏–ª–æ", "—Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ", "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ"])}, —á—Ç–æ '
    if gender == "masc":
        word = "–ø–æ–ø—ã—Ç–∞–ª—Å—è"
    else:
        word = "–ø–æ–ø—ã—Ç–∞–ª–∞—Å—å"
    s += f'—Ç—ã {random.choice(["–ø—ã—Ç–∞–µ—à—å—Å—è", "—Ö–æ—á–µ—à—å", word])} –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ '
    s += f'{random.choice(["–∫ –±–æ—Ç—É", "–∫–æ –º–Ω–µ"])}{random.choice(["üíúüíúüíú", "üñ§", "‚ù§‚ù§‚ù§"])}'
    return s


def random_phrase2():
    s = f'–ù–æ –º—ã {random.choice(["–≤—Å–µ–≥–æ –ª–∏—à—å", "—Ç–æ–ª—å–∫–æ –ª–∏—à—å", "–ª–∏—à—å"])} {random.choice(["–º–∞—à–∏–Ω—ã", "—Ä–æ–±–æ—Ç—ã", "–±–æ—Ç—ã"])}'
    s += f'{random.choice(["üíî", "üòî", "ü§ß"])}'
    return s


def dodo(event, vk, dop, verb):
    f = False
    dop += do[verb][1]
    if verb == '–∫—É—Å—å':
        verb = '—Å–¥–µ–ª–∞—Ç—å'
        dop = ' –∫—É—Å—å' + dop
    if verb == '—Å—É–∏—Ü–∏–¥':
        verb = '—Å–æ–≤–µ—Ä—à–∏—Ç—å'
        if random.randint(1, 10) == 1:
            dop = ' –¥–≤–æ–π–Ω–æ–µ —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ' + dop
        else:
            dop = ' —Å—É–∏—Ü–∏–¥' + dop
    form = do[verb][0]
    morph = pymorphy2.MorphAnalyzer()
    response = vk.users.get(user_ids=this)
    first_name = response[0]['first_name']
    gender = morph.parse(first_name)[0].tag.gender
    if 'reply_message' in event.obj.message:
        i = event.obj.message['reply_message']['from_id']
    else:
        i = last
    if i < 0:
        if verb == '—Å–æ–≤–µ—Ä—à–∏—Ç—å' and (dop == ' —Å—É–∏—Ü–∏–¥ —Å' or dop == ' –¥–≤–æ–π–Ω–æ–µ —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ —Å'):
            response = vk.users.get(user_ids=this)
            second_name = response[0]['first_name']
            second_name = morph.parse(second_name)[0].inflect({'ablt'}).word
            second_name = '@id' + str(this) + '(' + second_name.title() + ')'
            vk.messages.send(
                peer_id=event.obj.message['peer_id'],
                message=f'–õ–∞—Ä—Å —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ –≤–º–µ—Å—Ç–µ —Å {second_name}',
                random_id=random.randint(0, 2 ** 64))
        elif verb not in ("—É–µ–±–∞—Ç—å", '—É–∫—Ä–∞—Å—Ç—å', '—Å–∂–µ—á—å', '—Å—Ç—É–∫–Ω—É—Ç—å', '–≤—Ä–µ–∑–∞—Ç—å', '–∏–∑–±–∏—Ç—å', '—É–±–∏—Ç—å', '–∑–∞–∫–æ–ø–∞—Ç—å', "–∑–∞–±—Ä–∞—Ç—å", "—Å–ª–æ–º–∞—Ç—å", "–æ—Ç—à–∏—Ç—å", "—É–Ω–∏–∑–∏—Ç—å"):
            if verb == '–æ–±–Ω—è—Ç—å':
                vk.messages.send(
                    peer_id=event.obj.message['peer_id'],
                    message='–û–±–Ω–∏–º–∞–µ—Ç –≤ –æ—Ç–≤–µ—Ç üíú',
                    random_id=random.randint(0, 2 ** 64))
            else:
                vk.messages.send(
                    peer_id=event.obj.message['peer_id'],
                    message=random_phrase1(gender),
                    random_id=random.randint(0, 2 ** 64))
                vk.messages.send(
                    peer_id=event.obj.message['peer_id'],
                    message=random_phrase2(),
                    random_id=random.randint(0, 2 ** 64))
        else:
            vk.messages.send(
                peer_id=event.obj.message['peer_id'],
                message='–°–ª—É—à–∞–π –Ω—É —ç—Ç–æ –¥–∞–∂–µ –∂–µ—Å—Ç–æ–∫–æ... –Ø —Ç–æ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É...',
                random_id=random.randint(0, 2 ** 64))
        return
    if do[verb][2]:
        form2 = set(do[verb][2])
    else:
        if gender is None:
            gender = 'masc'
        form2 = {"past", gender}
    response = vk.users.get(user_ids=i)
    second_name = response[0]['first_name']
    global chit
    if verb in ("—É–µ–±–∞—Ç—å", '—É–∫—Ä–∞—Å—Ç—å', '—Å—Ç—É–∫–Ω—É—Ç—å', '–≤—Ä–µ–∑–∞—Ç—å', '—É–±–∏—Ç—å', '–∑–∞–∫–æ–ø–∞—Ç—å', "–∑–∞–±—Ä–∞—Ç—å", "—Å–ª–æ–º–∞—Ç—å", "–æ—Ç—à–∏—Ç—å", "—É–Ω–∏–∑–∏—Ç—å") and first_name != '–ê–ª–µ–∫—Å–µ–π' and second_name == '–ê–ª–µ–∫—Å–µ–π' and chit:
        i = this
        f = True
    response = vk.users.get(user_ids=i)
    vs = verb
    verb = morph.parse(verb)[0].inflect(form2).word + dop
    if '–∫—É—Å—å –∑–∞ –∂–æ–ø—É' in verb and first_name != '–ñ–∞–Ω–µ–ª—å':
        return
    second_name = response[0]['first_name']
    for j in morph.parse(second_name):
        if 'Name' in j.tag:
            break
    if second_name == '–ú–∏–ª–∞–Ω–∞':
        second_name = milan_pad[form]
    elif second_name == '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞':
        second_name = alex_pad[form]
    else:
        second_name = j.inflect({form}).word
    second_name = '@id' + str(i) + '(' + second_name.title() + ')'
    '''if f:
        second_name += f' –≤ –ø–æ–ø—ã—Ç–∫–µ {vs} –ê–ª–µ–∫—Å–µ—è'''''
    print(first_name, verb, second_name)
    vk.messages.send(
        peer_id=event.obj.message['peer_id'],
        message=f'{first_name} {verb} {second_name}',
        random_id=random.randint(0, 2 ** 64))


def soso(event, vk, dop, verb):
    if verb == '—Å—É–∏—Ü–∏–¥':
        verb = '—Å–æ–≤–µ—Ä—à–∏—Ç—å'
        dop = ' —Å—É–∏—Ü–∏–¥' + dop
    verb = verb.replace('–ø–æ–¥–µ–ª–∏—Ç—å—Å—è', '–¥–µ–ª–∏—Ç—å—Å—è')
    morph = pymorphy2.MorphAnalyzer()
    if solo[verb][0]:
        form = set(solo[verb][0])
    else:
        form = {'pres', '3per'}
    if 'past' in form:
        if this < 0:
            first_name = '–†—É–Ω–∞'
        else:
            response = vk.users.get(user_ids=this)
            first_name = response[0]['first_name']
        gender = morph.parse(first_name)[0].tag.gender
        form.add(gender)
    verb = morph.parse(verb)[0].inflect(form).word + dop
    if this < 0:
        first_name = '–†—É–Ω–∞'
    else:
        response = vk.users.get(user_ids=this)
        first_name = response[0]['first_name']
    print(first_name, verb)
    vk.messages.send(
        peer_id=event.obj.message['peer_id'],
        message=f'{first_name} {verb}',
        random_id=random.randint(0, 2 ** 64))


def role(event, vk, t):
    global this, last
    if this != event.obj.message['from_id'] and event.obj.message['from_id'] > 0:
        last = this
        this = event.obj.message['from_id']
    if ' ' in t.lower():
        x = t.lower().split()
        verb = x[0].lower()
        dop = ' ' + ' '.join(x[1:])
    else:
        verb = t.lower()
        dop = ''
    if verb == '—Å–ª–æ–º–∞—Ç—å' and dop == ' —â–∏—Ç':
        global chit
        chit = False
    if verb in solo:
        if verb in do:
            if 'reply_message' in event.obj.message:
                if verb == '—Å—É–∏—Ü–∏–¥' and random.randint(1, 20) == 1:
                    dazai_pashal(event, vk)
                elif verb == '—Å—É–∏—Ü–∏–¥' and random.randint(1, 5) == 1:
                    verb = '–¥–≤–æ–π–Ω–æ–µ —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ —Å'
                    dodo(event, vk, dop, verb)
                else:
                    dodo(event, vk, dop, verb)
            else:
                soso(event, vk, dop, verb)
        else:
            soso(event, vk, dop, verb)
    elif verb in do:
        dodo(event, vk, dop, verb)
