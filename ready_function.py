import json
import random

with open("vip.json", "r", encoding='utf8') as re:
    vip = json.load(re)
with open("braki.json", "r", encoding='utf8') as re:
    braki = json.load(re)


def print_help(vk, event, t):
    mess_old = '''–≠–¢–û –ù–ï–ê–ö–¢–£–ê–õ–¨–ù–û –õ–û–õ –Ø –ï–ì–û –ú–ï–ù–Ø–Æ –í–°–ï –í–†–ï–ú–Ø
    –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:
                                !{key_help} - –≤—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ –º–µ–Ω—é
                                !{key_call}id********* - –≤—ã–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                !{key_in_vip}id********* - –¢–û–õ–¨–ö–û –î–õ–Ø –í–ò–ü. –î–æ–±–∞–≤–∏—Ç—å –≤ –í–ò–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                !{key_no_vip}id********* - –¢–û–õ–¨–ö–û –î–õ–Ø –í–ò–ü. –£–¥–∞–ª–∏—Ç—å –∏–∑ –í–ò–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                !{key_show_vip} - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –í–ò–ü
                                !{key} - –¢–û–õ–¨–ö–û –î–õ–Ø –í–ò–ü. –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞
                                –î–õ–Ø –í–ò–ü! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å !! –ø–µ—Ä–µ–¥ —Å–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –±–æ—Ç –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –í–∞—à —Å—Ç–∞—Ç—É—Å''',
    vk.messages.send(
        peer_id=event.obj.message['peer_id'],
        message='*–∑–≤—É–∫ –º–æ–ª—á–∞–Ω–∏—è*',
        random_id=random.randint(0, 2 ** 64))


def show_vip(event, vk, vip):
    s = '–≠—Ç–∏ –ª—é–¥–∏ —Å–æ—Å—Ç–æ—è—Ç –≤ –í–ò–ü –∫–ª–∞—Å—Å–µ!!!\n'
    for i in sorted(vip):
        response = vk.users.get(user_ids=i)
        first_name = response[0]['first_name']
        second_name = response[0]['last_name']
        s += f'@id{i}({first_name} {second_name})\n'
    s = s[:-1]
    vk.messages.send(
        peer_id=event.obj.message['peer_id'],
        message=s,
        random_id=random.randint(0, 2 ** 64))


def in_vip(event, vk, vip):
    if 'reply_message' in event.obj.message:
        if event.obj.message['from_id'] in vip:
            i = event.obj.message['reply_message']['from_id']
            vip.append(i)
            with open("vip.json", "w") as wr:
                json.dump(vip, wr)
            response = vk.users.get(user_ids=i)
            first_name = response[0]['first_name']
            second_name = response[0]['last_name']
            vk.messages.send(
                peer_id=event.obj.message['peer_id'],
                message=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å –í–ò–ü: @id{i}({first_name} {second_name})',
                random_id=random.randint(0, 2 ** 64))
        else:
            vk.messages.send(
                peer_id=event.obj.message['peer_id'],
                message=f'–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –í–ò–ü –∏ —É –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é',
                random_id=random.randint(0, 2 ** 64))
    else:
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message='–ß–µ–ª —Ç—ã —Ç–æ–∫—Å–∏–∫, –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —é–∑–∞—Ç—å',
            random_id=random.randint(0, 2 ** 64))


def from_vip(event, vk, vip):
    if 'reply_message' in event.obj.message:
        if event.obj.message['from_id'] in vip:
            i = event.obj.message['reply_message']['from_id']
            if i in vip:
                vip.remove(i)
                with open("vip.json", "w") as wr:
                    json.dump(vip, wr)
                response = vk.users.get(user_ids=i)
                first_name = response[0]['first_name']
                second_name = response[0]['last_name']
                vk.messages.send(
                    peer_id=event.obj.message['peer_id'],
                    message=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –í–ò–ü: @id{i}({first_name} {second_name})',
                    random_id=random.randint(0, 2 ** 64))
            else:
                vk.messages.send(
                    peer_id=event.obj.message['peer_id'],
                    message=f'–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –í–ò–ü',
                    random_id=random.randint(0, 2 ** 64))
        else:
            vk.messages.send(
                peer_id=event.obj.message['peer_id'],
                message=f'–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –í–ò–ü –∏ —É –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é',
                random_id=random.randint(0, 2 ** 64))
    else:
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message='–ß–µ–ª —Ç—ã —Ç–æ–∫—Å–∏–∫, –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —é–∑–∞—Ç—å',
            random_id=random.randint(0, 2 ** 64))


def call(event, vk):
    if 'reply_message' in event.obj.message:
        i = event.obj.message['reply_message']['from_id']
        response = vk.users.get(user_ids=i)
        first_name = response[0]['first_name']
        second_name = response[0]['last_name']
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message=f'–í–∞—Å –≤—ã–∑–≤–∞–ª–∏: @id{i}({first_name} {second_name})',
            random_id=random.randint(0, 2 ** 64))
    else:
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message='–ß–µ–ª —Ç—ã —Ç–æ–∫—Å–∏–∫, –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —é–∑–∞—Ç—å',
            random_id=random.randint(0, 2 ** 64))


def send_keys(event, vk, vip):
    with open("keys.json", "r", encoding='utf8') as re:
        keys = json.load(re)
    if event.obj.message['from_id'] in vip:
        vk.messages.send(
            user_id=event.obj.message['from_id'],
            message=f'–í–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞: {keys["key_on"]}\n–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞: {keys["key_off"]}',
            random_id=random.randint(0, 2 ** 64))
    else:
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message=f'–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –í–ò–ü –∏ —É –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
            random_id=random.randint(0, 2 ** 64))


def mirror(event, vk, t):
    text = t[8:][::-1]
    if text:
        text = text.split('(')
        tt = []
        for i in text:
            tt.append(i.replace(')', '('))
        text = ')'.join(tt)
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message=text,
            random_id=random.randint(0, 2 ** 64))


def know_id(event, vk):
    if 'reply_message' in event.obj.message:
        id = event.obj.message['reply_message']['from_id']
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message=f'–ù—É –≤–æ—Ç —Ç–µ–±–µ id: {id}',
            random_id=random.randint(0, 2 ** 64))
    else:
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message='–ß–µ–ª —Ç—ã —Ç–æ–∫—Å–∏–∫, –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —é–∑–∞—Ç—å',
            random_id=random.randint(0, 2 ** 64))


def antismoke(event, vk, t):
    if event.obj.message['attachments'] and event.obj.message['attachments'][0]['type'] == 'sticker':
        if event.obj.message['attachments'][0]['sticker']['sticker_id'] in [51120, 20836]:
            vk.messages.send(
                peer_id=event.obj.message['peer_id'],
                message='–ö–£–†–ï–ù–ò–ï –ó–î–û–†–û–í–¨–Æ –í–†–ï–î–ò–¢, –•–í–ê–¢–ò–¢ –£–ñ–ï',
                random_id=random.randint(0, 2 ** 64))
    if 'üö¨' in t:
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message='—Ñ—É –∫—É—Ä—è—Ç–∏–Ω–∞ –æ–π —Ç–æ –µ—Å—Ç—å –∫—É—Ä–µ–Ω–∏–µ',
            random_id=random.randint(0, 2 ** 64))


def pacefic(event, vk, t):
    if t == t.upper():
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message="—Ç–∏—à–µ —Ç–∏—à–µ –ø–æ—Å–ø–æ–∫–æ–π–Ω–µ–µ",
            random_id=random.randint(0, 2 ** 64))


def married(event, vk):
    if 'reply_message' in event.obj.message:
        chel1 = event.obj.message['from_id']
        chel2 = event.obj.message['reply_message']['from_id']
        if chel2 < 0:
            return
        if str(chel1) in braki:
            braks = braki[str(chel1)]
            for i in braks:
                if i[0] == str(chel2) and i[2] == 1:
                    vk.messages.send(
                        peer_id=event.obj.message['peer_id'],
                        message="–•–µ—Ö–µ —è –ø—Ä–æ—Ç–∏–≤ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –±—Ä–∞–∫–æ–≤ –æ–π",
                        random_id=random.randint(0, 2 ** 64))
                    return
        response = vk.users.get(user_ids=chel1)
        first_name1 = response[0]['first_name']
        second_name1 = response[0]['last_name']
        response = vk.users.get(user_ids=chel2)
        first_name2 = response[0]['first_name']
        second_name2 = response[0]['last_name']
        id = random.randint(0, 2 ** 64)
        s1 = f'@id{chel2}({first_name2} {second_name2}), —Å–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –í—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫ —Å {first_name1} {second_name1}?'
        s2 = f'–ù–∞–ø–∏—à–∏—Ç–µ "–õ–∞—Ä—Å –¥–∞/–Ω–µ—Ç {id}" –¥–ª—è –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–∫–∞–∑–∞)\n–¶–ò–§–†–´ –ü–û–°–õ–ï –¥–∞ –∏–ª–∏ –Ω–µ—Ç –ü–ò–°–ê–¢–¨ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û'
        chel1 = str(chel1)
        chel2 = str(chel2)
        if chel1 in braki:
            braki[chel1].append([chel2, id, 2])
        else:
            braki[chel1] = [[chel2, id, 2]]
        if chel2 in braki:
            braki[chel2].append([chel1, id, 3])
        else:
            braki[chel2] = [[chel1, id, 3]]
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message=s1 + '\n' + s2,
            random_id=random.randint(0, 2 ** 64))
        with open("braki.json", "w") as wr:
            json.dump(braki, wr)
    else:
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message='–Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —é–∑–∞—Ç—å...',
            random_id=random.randint(0, 2 ** 64))


def married1(event, vk, id):
    id = int(id)
    chel1 = event.obj.message['from_id']
    if str(chel1) not in braki:
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message="–£ –í–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫...",
            random_id=random.randint(0, 2 ** 64))
        return
    braks = braki[str(chel1)]
    for ii, i in enumerate(braks):
        if i[1] == id and i[2] == 3:
            chel2 = int(i[0])
            break
    else:
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message=f"–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫ —Å —Ç–∞–∫–∏–º id ({id})",
            random_id=random.randint(0, 2 ** 64))
        return
    braki[str(chel1)][ii] = [str(chel2), id, 1]
    braks = braki[str(chel2)]
    for ii, i in enumerate(braks):
        if i[1] == id and i[2] == 2:
            break
    braki[str(chel2)][ii] = [str(chel1), id, 1]

    response = vk.users.get(user_ids=chel1)
    first_name1 = response[0]['first_name']
    second_name1 = response[0]['last_name']
    response = vk.users.get(user_ids=chel2)
    first_name2 = response[0]['first_name']
    second_name2 = response[0]['last_name']
    s1 = f'@id{chel1}({first_name1} {second_name1}) –∏ @id{chel2}({first_name2} {second_name2}) –æ–±–≤–µ–Ω—á–∞–ª–∏—Å—å!'
    vk.messages.send(
        peer_id=event.obj.message['peer_id'],
        message=s1,
        random_id=random.randint(0, 2 ** 64))
    with open("braki.json", "w") as wr:
        json.dump(braki, wr)


def married2(event, vk, id):
    id = int(id)
    chel1 = event.obj.message['from_id']
    if str(chel1) not in braki:
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message="–£ –í–∞—Å –∏—Ç–∞–∫ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫...",
            random_id=random.randint(0, 2 ** 64))
        return
    braks = braki[str(chel1)]
    for ii, i in enumerate(braks):
        if i[1] == id and i[2] == 3:
            chel2 = int(i[0])
            break
    else:
        vk.messages.send(
            peer_id=event.obj.message['peer_id'],
            message=f"–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫ —Å —Ç–∞–∫–∏–º id ({id})",
            random_id=random.randint(0, 2 ** 64))
        return
    del braki[str(chel1)][ii]
    braks = braki[str(chel2)]
    for ii, i in enumerate(braks):
        if i[1] == id and i[2] == 2:
            break
    del braki[str(chel2)][ii]
    response = vk.users.get(user_ids=chel1)
    first_name1 = response[0]['first_name']
    second_name1 = response[0]['last_name']
    response = vk.users.get(user_ids=chel2)
    first_name2 = response[0]['first_name']
    second_name2 = response[0]['last_name']
    s1 = f'@id{chel2}({first_name2} {second_name2}), —Ö–∞—Ö–∞ @id{chel1}({first_name1} {second_name1}) –Ω–µ —Ö–æ—á–µ—Ç —Å —Ç–æ–±–æ–π –≤ –±—Ä–∞–∫'
    vk.messages.send(
        peer_id=event.obj.message['peer_id'],
        message=s1,
        random_id=random.randint(0, 2 ** 64))
    with open("braki.json", "w") as wr:
        json.dump(braki, wr)
